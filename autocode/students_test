package coverage

import (
	"os"
	"fmt"
	"time"
	"testing"
	"sort"
	"strconv"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW

func TestLen(t *testing.T) {
	pp := make(People, 0)
	p1 := Person{firstName: "Mak", lastName: "Sim", birthDay: time.Now()}
	p2 := Person{firstName: "Dan", lastName: "Il", birthDay: time.Now()}
	size := 0
	pp = append(pp, p1); size += 1
	pp = append(pp, p2); size += 1
	fmt.Println(pp)
	if pp.Len() != size {
		t.Errorf("Length error - got: %d, expected: %d", pp.Len(), size)
	}
}

func TestSwap(t *testing.T) {

	pp := make(People, 0)
	p1 := Person{firstName: "Mak", lastName: "Sim", birthDay: time.Now()}
	p2 := Person{firstName: "Dan", lastName: "Il", birthDay: time.Now()}
	pp = append(pp, p1)
	pp = append(pp, p2)
	fmt.Println(pp)
	pp.Swap(0, 1)
	fmt.Println(pp)
	if pp[0] != p2 || pp[1] != p1 {
		t.Errorf("Not swapped\n      got: %v, %v\n expected: %v, %v", pp[0], pp[1], p2, p1)
	}
}

func TestLess(t *testing.T) {
	pp := make(People, 0)
	bd := time.Now()
	p1 := Person{firstName: "Mak", lastName: "Sim", birthDay: bd}
	p2 := Person{firstName: "Dan", lastName: "Il", birthDay: bd}
	p3 := Person{firstName: "Dan", lastName: "Ik", birthDay: bd}
	p4 := Person{firstName: "Dan", lastName: "Il", birthDay: bd.Add(time.Hour)}
	size := 0
	pp = append(pp, p1); size += 1
	pp = append(pp, p2); size += 1
	pp = append(pp, p3); size += 1
	pp = append(pp, p4); size += 1
	fmt.Println(pp)
	sort.Sort(People(pp))
	fmt.Println(pp)
	if pp.Len() != size {
		t.Errorf("Length error\n      got: %d\n expected: %d", pp.Len(), size)
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////

func TestMatrix(t *testing.T) {

	m, err := New(`1 2
	               3 4`)
	fmt.Println(m)
	if err != nil {
		t.Errorf("Matrix not created properly:\n      got: %v\n expected: %v", err, nil)
	}
	m, err = New(`1 2 3
	              3 4`)
	fmt.Println(m)
	if err == nil {
		t.Errorf("Shit happens:\n      got: %v\n expected: %v", err, "Rows need to be the same length")
	}
	m, err = New(`1 a
	              3 4`)
	fmt.Println(m)
	expectedErr := &strconv.NumError{Func: "Atoi", Num: "a", Err: strconv.ErrSyntax}
	if err == nil {
		t.Errorf("Shit happens:\n      got: %v\n expected: %v", err, expectedErr)
	} else if *err.(*strconv.NumError) != *expectedErr {
		t.Errorf("Shit happens:\n      got: %v\n expected: %v", err, expectedErr)
	}
}
