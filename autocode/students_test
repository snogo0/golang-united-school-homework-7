package coverage

import (
	"os"
	"fmt"
	"time"
	"testing"
	"sort"
	"strconv"
	"errors"
	"github.com/stretchr/testify/assert"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW

func TestLen(t *testing.T) {
	pp := make(People, 0)
	p1 := Person{firstName: "Mak", lastName: "Sim", birthDay: time.Now()}
	p2 := Person{firstName: "Dan", lastName: "Il", birthDay: time.Now()}
	size := 0
	pp = append(pp, p1); size += 1
	pp = append(pp, p2); size += 1
	fmt.Println(pp)
	if pp.Len() != size {
		t.Errorf("Length error - got: %d, expected: %d", pp.Len(), size)
	}
}

func TestSwap(t *testing.T) {

	pp := make(People, 0)
	p1 := Person{firstName: "Mak", lastName: "Sim", birthDay: time.Now()}
	p2 := Person{firstName: "Dan", lastName: "Il", birthDay: time.Now()}
	pp = append(pp, p1)
	pp = append(pp, p2)
	fmt.Println(pp)
	pp.Swap(0, 1)
	fmt.Println(pp)
	if pp[0] != p2 || pp[1] != p1 {
		t.Errorf("Not swapped\n      got: %v, %v\n expected: %v, %v", pp[0], pp[1], p2, p1)
	}
}

func TestLess(t *testing.T) {
	pp := make(People, 0)
	bd := time.Now()
	p1 := Person{firstName: "Mak", lastName: "Sim", birthDay: bd}
	p2 := Person{firstName: "Dan", lastName: "Il", birthDay: bd}
	p3 := Person{firstName: "Dan", lastName: "Ik", birthDay: bd}
	p4 := Person{firstName: "Dan", lastName: "Il", birthDay: bd.Add(time.Hour)}
	size := 0
	pp = append(pp, p1); size += 1
	pp = append(pp, p2); size += 1
	pp = append(pp, p3); size += 1
	pp = append(pp, p4); size += 1
	fmt.Println(pp)
	sort.Sort(People(pp))
	fmt.Println(pp)
	if pp.Len() != size {
		t.Errorf("Length error\n      got: %d\n expected: %d", pp.Len(), size)
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////

func TestMatrix(t *testing.T) {
	t.Parallel()
	testCases := map[string]struct {
		input    string
		output   string
		expErr   error
		numError bool
	}{
		"valid matrix 2x2":       {input: "1 2\n3 4", output: "&{2 2 [1 2 3 4]}", expErr: nil},
		"valid matrix 3x2":       {input: "1 2\n3 4\n5 6", output: "&{3 2 [1 2 3 4 5 6]}", expErr: nil},
		"valid matrix 2x3":       {input: "1 2 3\n4 5 6", output: "&{2 3 [1 2 3 4 5 6]}", expErr: nil},
		"different column sizes": {input: "1 2 3\n4 5", output: "<nil>", expErr: fmt.Errorf("Rows need to be the same length")},
		"not numbers":            {input: "1 2\n3 E", output: "<nil>", expErr: &strconv.NumError{Func: "Atoi", Num: "E", Err: strconv.ErrSyntax}, numError: true},
	}

	for name, tcase := range testCases {
		tt := tcase
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			output, err := New(tt.input)
			fmt.Printf("Got: %v %+v\n", output, err)
			fmt.Printf("Exp: %v %+v\n", tt.output, tt.expErr)
			if tt.expErr != nil {
				if tt.numError {
					if !errors.As(err, &tt.expErr) {
						t.Errorf("%s:\n wrong error type is used in the return:\n      got: %T\n expected: %T", name, err, tt.expErr)
					}
				}
			} else {
				if err != nil {
					t.Errorf("Error should be <nil>:\n      got: %s", err)
				}
			}

			if fmt.Sprintf("%v", output) != tt.output {
				t.Errorf("Matrix wasn't created properly:\nOutput:\n      got: %v\n expected: %v\nError:\n      got: %v\n expected: %v", output, tt.output, err, nil)
			}
		})
	}
}

func TestRows(t *testing.T) {
	m, err := New("1 2\n3 4")
	fmt.Printf("New: %v %v\n", m, err)
	assert.Empty(t, err, "Unexpected error return")
	assert.NotEmpty(t, m, "Nothing to work with")
	assert.ElementsMatch(t, m.Rows(), [][]int{{1, 2}, {3, 4}}, "Rows is broken")
}

func TestCols(t *testing.T) {
	m, err := New("1 2\n3 4")
	fmt.Printf("New: %v %v\n", m, err)
	assert.Empty(t, err, "Unexpected error return")
	assert.NotEmpty(t, m, "Nothing to work with")
	assert.ElementsMatch(t, m.Cols(), [][]int{{1, 3}, {2, 4}}, "Columns is broken")
}

func TestSet(t *testing.T) {
	m, err := New("1 2\n3 4")
	fmt.Printf("New: %v %v\n", m, err)
	assert.Empty(t, err, "Unexpected error return")
	assert.NotEmpty(t, m, "Nothing to work with")
	ok := m.Set(0, 0, 99)
	assert.Equal(t, ok, true, "")
	assert.ElementsMatch(t, m.Rows(), [][]int{{99, 2}, {3, 4}}, "Columns is broken")
	ok = m.Set(0, 5, 99)
	assert.Equal(t, ok, false, "")
	ok = m.Set(5, 0, 99)
	assert.Equal(t, ok, false, "")
	ok = m.Set(-5, 0, 99)
	assert.Equal(t, ok, false, "")
	ok = m.Set(0, -5, 99)
	assert.Equal(t, ok, false, "")
}
